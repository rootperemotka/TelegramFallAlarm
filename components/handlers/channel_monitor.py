from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message
from components.handlers.base import BaseRouter
import asyncio
from datetime import datetime
from functools import wraps
from typing import Any

class ChannelMonitorRouter(BaseRouter):
    def __post_init__(self):
        super().__post_init__()
        self._register_handlers()
        self.last_message_time = datetime.now()
        self.monitoring_task = None
        
    def _get_env_value(self, key: str, expected_type: type = str) -> Any:
        try:
            value = getattr(self.env, key)
            if expected_type == list:
                if isinstance(value, str):
                    return [v.strip() for v in value.split(",")]
                return value if isinstance(value, list) else []
            elif expected_type == int:
                return int(value) if isinstance(value, (str, int)) else 0
            elif expected_type == bool:
                return bool(value) if isinstance(value, (str, bool)) else False
            return str(value)
        except (AttributeError, ValueError) as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {key} –∏–∑ env: {e}")
            return expected_type()
            
    def _check_access(self, func):
        @wraps(func)
        async def wrapper(message: Message, *args, **kwargs):
            user_id = str(message.from_user.id)
            allowed_users = self._get_env_value("TELEGRAM_BOT_USERS_ID_ACCESS", list)
            
            if "all" in allowed_users:
                return await func(message, *args, **kwargs)
                
            if user_id in allowed_users:
                return await func(message, *args, **kwargs)
                
            self.logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        return wrapper
        
    def _register_handlers(self):
        @self.router.message(Command("start"))
        @self._check_access
        async def cmd_start(message: Message):
            timeout = self._get_env_value("ALARM_TIMEOUT_FOR_MESSAGE", int)
            monitor_timeout = self._get_env_value("ALARM_MONITOR_TIMEOUT", int)
            channel_id = self._get_env_value("ALARM_MONITOR_CHANNEL_ID")
            author_id = self._get_env_value("ALARM_MESSAGE_AUTHOR_ID")
            notify_users = self._get_env_value("ALARM_USERS_ID_NOTIFICATION", list)
            
            help_text = (
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤.\n\n"
                "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/start_monitoring - –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤\n"
                "/stop_monitoring - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
                "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n\n"
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env:\n"
                f"‚Ä¢ –¢–∞–π–º–∞—É—Ç: {timeout} —Å–µ–∫\n"
                f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {monitor_timeout} —Å–µ–∫\n"
                f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'–≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤' if channel_id == 'auto' else f'–∫–∞–Ω–∞–ª–∞ {channel_id}'}\n"
                f"‚Ä¢ –ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π: {'–≤—Å–µ' if author_id == 'all' else author_id}\n"
                f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {'–≤—Å–µ' if 'all' in notify_users else ', '.join(notify_users)}\n\n"
                "‚ÑπÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start_monitoring"
            )
            await message.answer(help_text)
            
        @self.router.message(Command("status"))
        @self._check_access
        async def cmd_status(message: Message):
            if self.monitoring_task and not self.monitoring_task.done():
                time_since_last = (datetime.now() - self.last_message_time).total_seconds()
                monitor_timeout = self._get_env_value("ALARM_MONITOR_TIMEOUT", int)
                status_text = (
                    "üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n"
                    f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
                    f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {self.last_message_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f"‚Ä¢ –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {int(time_since_last)} —Å–µ–∫\n"
                    f"‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑: {max(0, monitor_timeout - time_since_last):.0f} —Å–µ–∫"
                )
            else:
                status_text = "üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            await message.answer(status_text)
            
        @self.router.message(Command("start_monitoring"))
        @self._check_access
        async def cmd_start_monitoring(message: Message):
            if self.monitoring_task is None or self.monitoring_task.done():
                self.monitoring_task = asyncio.create_task(self._monitor_channel(message))
                await message.answer("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ –∑–∞–ø—É—â–µ–Ω")
            else:
                await message.answer("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                
        @self.router.message(Command("stop_monitoring"))
        @self._check_access
        async def cmd_stop_monitoring(message: Message):
            if self.monitoring_task and not self.monitoring_task.done():
                self.monitoring_task.cancel()
                await message.answer("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                await message.answer("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω")
                
        @self.router.message(F.chat.type.in_({"channel", "group"}))
        async def handle_channel_message(message: Message):
            self.last_message_time = datetime.now()
            
    async def _monitor_channel(self, notification_message: Message):
        while True:
            try:
                current_time = datetime.now()
                time_diff = (current_time - self.last_message_time).total_seconds()
                timeout = self._get_env_value("ALARM_TIMEOUT_FOR_MESSAGE", int)
                monitor_timeout = self._get_env_value("ALARM_MONITOR_TIMEOUT", int)
                
                if time_diff > timeout:
                    await self._send_notification(notification_message)
                    self.last_message_time = current_time
                    
                await asyncio.sleep(monitor_timeout)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞: {e}")
                await asyncio.sleep(monitor_timeout)
                
    async def _send_notification(self, notification_message: Message):
        try:
            channel_id = self._get_env_value("ALARM_MONITOR_CHANNEL_ID")
            timeout = self._get_env_value("ALARM_TIMEOUT_FOR_MESSAGE", int)
            channel_info = "–≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö" if channel_id == "auto" else f"–∫–∞–Ω–∞–ª–µ {channel_id}"
            
            notification_text = (
                f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n"
                f"–í {channel_info} –Ω–µ –±—ã–ª–æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π "
                f"–±–æ–ª–µ–µ {timeout} —Å–µ–∫—É–Ω–¥!\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ: {self.last_message_time.strftime('%Y-%m-%d %H:%M:%S')}"
            )
            
            await notification_message.answer(notification_text)
            self.logger.warning(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {channel_info}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}") 