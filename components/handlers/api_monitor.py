from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message
from components.handlers.base import BaseRouter
from components.modules import ZvonoBot
import asyncio
import aiohttp
from datetime import datetime
from functools import wraps
from typing import Any, List, Dict

class ApiMonitorRouter(BaseRouter):
    def __post_init__(self):
        super().__post_init__()
        self._register_handlers()
        self.last_successful_check = datetime.now()
        self.monitoring_task = None
        
    def _get_env_value(self, key: str, expected_type: type = str) -> Any:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏–ø–∞.
        
        Args:
            key (str): –ö–ª—é—á –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            expected_type (type): –û–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö (str, int, bool, list)
            
        Returns:
            Any: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        try:
            value = getattr(self.env, key, None)
            
            if value is None:
                self.logger.warning(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                return [] if expected_type == list else expected_type()
            
            if expected_type == list and isinstance(value, str):
                return [v.strip() for v in value.split(",")]
            elif expected_type == list:
                return value if isinstance(value, list) else []
            elif expected_type == int and not isinstance(value, int):
                return int(value)
            elif expected_type == bool and not isinstance(value, bool):
                return bool(value)
            elif expected_type == str and not isinstance(value, str):
                return str(value)
                
            return value
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {key} –∏–∑ env: {e}")
            return [] if expected_type == list else expected_type()
            
    def _check_access(self, func):
        @wraps(func)
        async def wrapper(message: Message, *args, **kwargs):
            user_id = str(message.from_user.id)
            allowed_users = self._get_env_value("TELEGRAM_BOT_USERS_ID_ACCESS", list)
            
            if "all" in allowed_users:
                return await func(message, *args, **kwargs)
                
            if user_id in allowed_users:
                return await func(message, *args, **kwargs)
                
            self.logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        return wrapper
        
    def _parse_headers(self, headers_str: str) -> Dict[str, str]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å.
        
        Args:
            headers_str (str): –°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ key1:value1,key2:value2
            
        Returns:
            Dict[str, str]: –°–ª–æ–≤–∞—Ä—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        """
        if not headers_str:
            return {}
            
        headers = {}
        for header in headers_str.split(','):
            if ':' in header:
                key, value = header.split(':', 1)
                headers[key.strip()] = value.strip()
        return headers
        
    def _register_handlers(self):
        @self.router.message(Command("start"))
        @self._check_access
        async def cmd_start(message: Message):
            timeout = self._get_env_value("ALARM_TIMEOUT_FOR_MESSAGE", int)
            monitor_timeout = self._get_env_value("ALARM_MONITOR_TIMEOUT", int)
            api_url = self._get_env_value("ALARM_API_URL")
            api_method = self._get_env_value("ALARM_API_METHOD")
            notify_users = self._get_env_value("ALARM_USERS_ID_NOTIFICATION", list)
            phones_for_call = self._get_env_value("ALARM_PHONES_FOR_CALL", list)
            
            help_text = (
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API.\n\n"
                "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/start_monitoring - –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API\n"
                "/stop_monitoring - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
                "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n\n"
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env:\n"
                f"‚Ä¢ –¢–∞–π–º–∞—É—Ç: {timeout} —Å–µ–∫\n"
                f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {monitor_timeout} —Å–µ–∫\n"
                f"‚Ä¢ API URL: {api_url}\n"
                f"‚Ä¢ –ú–µ—Ç–æ–¥: {api_method}\n"
                f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {'–≤—Å–µ' if 'all' in notify_users else ', '.join(notify_users)}\n"
                f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω—ã –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤: {', '.join(phones_for_call) if phones_for_call else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n\n"
                "‚ÑπÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start_monitoring"
            )
            await message.answer(help_text)
            
        @self.router.message(Command("status"))
        @self._check_access
        async def cmd_status(message: Message):
            if self.monitoring_task and not self.monitoring_task.done():
                time_since_last = (datetime.now() - self.last_successful_check).total_seconds()
                monitor_timeout = self._get_env_value("ALARM_MONITOR_TIMEOUT", int)
                status_text = (
                    "üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API:\n\n"
                    f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n"
                    f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {self.last_successful_check.strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f"‚Ä¢ –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {int(time_since_last)} —Å–µ–∫\n"
                    f"‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑: {max(0, monitor_timeout - time_since_last):.0f} —Å–µ–∫"
                )
            else:
                status_text = "üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API:\n\n‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            await message.answer(status_text)
            
        @self.router.message(Command("start_monitoring"))
        @self._check_access
        async def cmd_start_monitoring(message: Message):
            if self.monitoring_task is None or self.monitoring_task.done():
                self.monitoring_task = asyncio.create_task(self._monitor_api(message))
                await message.answer("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API –∑–∞–ø—É—â–µ–Ω")
            else:
                await message.answer("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                
        @self.router.message(Command("stop_monitoring"))
        @self._check_access
        async def cmd_stop_monitoring(message: Message):
            if self.monitoring_task and not self.monitoring_task.done():
                self.monitoring_task.cancel()
                await message.answer("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                await message.answer("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω")
                
    async def _check_api(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API.
        
        Returns:
            bool: True –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            api_url = self._get_env_value("ALARM_API_URL")
            api_method = self._get_env_value("ALARM_API_METHOD")
            headers = self._parse_headers(self._get_env_value("ALARM_API_HEADERS"))
            body = self._get_env_value("ALARM_API_BODY")
            
            async with aiohttp.ClientSession() as session:
                if api_method.upper() == "GET":
                    async with session.get(api_url, headers=headers) as response:
                        return response.status == 200
                elif api_method.upper() == "POST":
                    async with session.post(api_url, headers=headers, data=body) as response:
                        return response.status == 200
                else:
                    self.logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ API: {api_method}")
                    return False
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API: {e}")
            return False
            
    async def _make_alarm_calls(self, phones: List[str], api_info: str, timeout: int):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–≤–æ–Ω–∫–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ —Ç—Ä–µ–≤–æ–≥–µ.
        
        Args:
            phones (List[str]): –°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
            api_info (str): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API
            timeout (int): –í—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        try:
            if not phones:
                self.logger.warning("–°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è –∑–≤–æ–Ω–∫–∞ –ø—É—Å—Ç")
                return
                
            api_key = self._get_env_value("ZVONOBOT_API_KEY")
            if not api_key:
                self.logger.error("API-–∫–ª—é—á –ó–≤–æ–Ω–æ–±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                return
                
            outgoing_phone = self._get_env_value("ZVONOBOT_OUTGOING_PHONE")
            duty_phone = self._get_env_value("ZVONOBOT_DUTY_PHONE", int)
            gender = self._get_env_value("ZVONOBOT_VOICE_GENDER", int)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–≤–æ–Ω–∫–∞
            message = self._get_env_value("ZVONOBOT_MESSAGE")
            if not message:
                message = f"–í–Ω–∏–º–∞–Ω–∏–µ! API {api_info} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –±–æ–ª–µ–µ {timeout} —Å–µ–∫—É–Ω–¥. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã."
                
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ó–≤–æ–Ω–æ–±–æ—Ç–∞
            zvonobot = ZvonoBot(api_key=api_key)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–≤–æ–Ω–∫–∏
            result = zvonobot.make_bulk_call(
                phones=phones,
                message=message,
                outgoing_phone=outgoing_phone,
                gender=gender,
                duty_phone=duty_phone
            )
            
            self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∑–≤–æ–Ω–∫–∏ –Ω–∞ –Ω–æ–º–µ—Ä–∞: {', '.join(phones)}")
            self.logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –ó–≤–æ–Ω–æ–±–æ—Ç—É: {result}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–≤–æ–Ω–∫–æ–≤: {e}")
                
    async def _send_notification(self, notification_message: Message):
        try:
            api_url = self._get_env_value("ALARM_API_URL")
            timeout = self._get_env_value("ALARM_TIMEOUT_FOR_MESSAGE", int)
            
            notification_text = (
                f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n"
                f"API {api_url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω "
                f"–±–æ–ª–µ–µ {timeout} —Å–µ–∫—É–Ω–¥!\n"
                f"–ü–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞: {self.last_successful_check.strftime('%Y-%m-%d %H:%M:%S')}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            await notification_message.answer(notification_text)
            self.logger.warning(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API {api_url}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è –∑–≤–æ–Ω–∫–∞
            phones = self._get_env_value("ALARM_PHONES_FOR_CALL", list)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤–æ–Ω–∫–∏
            await self._make_alarm_calls(phones, api_url, timeout)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
    async def _monitor_api(self, notification_message: Message):
        while True:
            try:
                current_time = datetime.now()
                time_diff = (current_time - self.last_successful_check).total_seconds()
                timeout = self._get_env_value("ALARM_TIMEOUT_FOR_MESSAGE", int)
                monitor_timeout = self._get_env_value("ALARM_MONITOR_TIMEOUT", int)
                
                is_api_available = await self._check_api()
                
                if is_api_available:
                    self.last_successful_check = current_time
                elif time_diff > timeout:
                    await self._send_notification(notification_message)
                    self.last_successful_check = current_time
                    
                await asyncio.sleep(monitor_timeout)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ API: {e}")
                await asyncio.sleep(monitor_timeout) 